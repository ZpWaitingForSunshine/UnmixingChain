import breeze.linalg.{*, DenseMatrix, DenseVector, inv, pinv, sum}
import org.apache.spark.SparkContext
import tools.{HSIInputFormat, Init, JTool}

object Demo {
  def main(args: Array[String]): Unit = {


//      var M = DenseMatrix(Array(820.0,1001.0,1094.0,1166.0,1244.0,1309.0,1347.0,1368.0,1405.0,1431.0,1497.0,1557.0,1640.0,1726.0,1816.0,1910.0,1991.0,2080.0,2164.0,2220.0,2271.0,2299.0,2332.0,2357.0,2383.0,2407.0,2448.0,2483.0,2525.0,2446.0,2479.0,2517.0,2576.0,2592.0,2624.0,2688.0,2706.0,2749.0,2768.0,2792.0,2797.0,2795.0,2805.0,2814.0,2801.0,2810.0,2801.0,2804.0,2795.0,2792.0,2800.0,2795.0,2803.0,2810.0,2817.0,2814.0,2815.0,2861.0,2872.0,2892.0,2905.0,2930.0,2958.0,2978.0,2999.0,3017.0,3043.0,3075.0,3101.0,3133.0,3156.0,3189.0,3216.0,3239.0,3271.0,3293.0,3332.0,3344.0,3351.0,3393.0,3429.0,3454.0,3466.0,3511.0,3540.0,3566.0,3586.0,3615.0,3640.0,3660.0,3695.0,3698.0,3714.0,3723.0,3810.0,3803.0,3865.0,3809.0,3849.0,3840.0,3861.0,3869.0,3843.0,3610.0,3556.0,3669.0,3687.0,3715.0,3741.0,3804.0,3840.0,3890.0,3949.0,3945.0,3978.0,4014.0,4042.0,4049.0,4048.0,4078.0,4088.0,4128.0,4126.0,4150.0,4160.0,4154.0,4172.0,4168.0,4159.0,4191.0,4183.0,4180.0,4133.0,4114.0,4100.0,4140.0,4127.0,4101.0,4120.0,4160.0,4029.0,3318.0,3375.0,3437.0,3509.0,3681.0,3646.0,3681.0,3660.0,3647.0,3645.0,3631.0,3641.0,3579.0,3542.0,3556.0,3512.0,3485.0,3477.0,3393.0,3271.0,3218.0,3110.0,3057.0,2953.0,2885.0,3046.0,3185.0,3226.0,3235.0,3223.0,3173.0,3194.0,3133.0,3069.0,2940.0,2913.0,2909.0,2826.0,2776.0,2816.0,2734.0,2704.0,2628.0,2654.0,2608.0,2511.0,2405.0,2316.0,2354.0,2338.0,2248.0))
//    val M =new DenseMatrix(192,11,Array())



    if (args.length < 3) {
      val str =
        """
          | ucls
          |args(0): the numbers of random vector
          |args(1): imageid
          |args(2): baseapi
        """
      println(str)
      sys.exit(-1)
    }
    var t1 = System.currentTimeMillis()
    // Init
    var image = Init.fetchImage((args(1).toInt), args(2))
    var hdfsinfo = Init.fetchHDFSInfo(image.getHdfsid, args(2))

    // get random vector
    var randomVector = args(0)
    // create random vector as skewers
    val mat = JTool.createMat(randomVector.toInt, image.getBands.toInt)

    // init spark
    val home = System.getenv("SPARK_HOME") //获得环境变量

    val spark = new SparkContext("local[4]", "PPI", home)

    val bconf = spark.broadcast(image.getRows, image.getSamples, image.getBands, image.getDatatype.toShort, image.getInterleave.toLowerCase, mat)

    val file = spark.newAPIHadoopFile(hdfsinfo.getUrl.replaceAll("\"",""), classOf[HSIInputFormat], classOf[Integer], classOf[Array[Byte]])
    var t2 = System.currentTimeMillis()
    println("read data finshed! cost about" + (t2 - t1) +"seconds")



    var M =new DenseMatrix(192,11,Array(5113.0,5112.0,5419.0,5586.0,5828.0,6010.0,6097.0,6151.0,6251.0,6335.0,6472.0,6597.0,6708.0,6825.0,6949.0,7089.0,7201.0,7317.0,7390.0,7451.0,7500.0,7551.0,7596.0,7634.0,7679.0,7711.0,7751.0,7812.0,7869.0,7873.0,7920.0,7997.0,8033.0,8067.0,8106.0,8132.0,8191.0,8220.0,8256.0,8328.0,8318.0,8346.0,8387.0,8368.0,8398.0,8387.0,8426.0,8459.0,8467.0,8491.0,8500.0,8504.0,8547.0,8536.0,8519.0,8508.0,8523.0,8532.0,8536.0,8551.0,8582.0,8635.0,8659.0,8673.0,8689.0,8653.0,8666.0,8705.0,8718.0,8748.0,8740.0,8757.0,8751.0,8766.0,8773.0,8765.0,8706.0,8665.0,8622.0,8753.0,8723.0,8741.0,8744.0,8777.0,8779.0,8778.0,8817.0,8802.0,8798.0,8809.0,8812.0,8812.0,8860.0,8795.0,8813.0,8790.0,8808.0,8806.0,8777.0,8748.0,8682.0,8641.0,8523.0,7859.0,7894.0,7981.0,8047.0,8042.0,8106.0,8235.0,8301.0,8341.0,8388.0,8410.0,8467.0,8497.0,8538.0,8527.0,8523.0,8571.0,8584.0,8570.0,8565.0,8569.0,8579.0,8598.0,8634.0,8581.0,8582.0,8638.0,8651.0,8631.0,8587.0,8569.0,8569.0,8616.0,8548.0,8528.0,8544.0,8504.0,8441.0,7104.0,7285.0,7388.0,7666.0,7908.0,7978.0,7916.0,7945.0,8018.0,8062.0,8082.0,8097.0,8094.0,8083.0,8113.0,8113.0,8094.0,8117.0,8058.0,7972.0,7895.0,7786.0,7695.0,7649.0,7558.0,7544.0,7524.0,7539.0,7611.0,7530.0,7548.0,7566.0,7641.0,7654.0,7729.0,7724.0,7803.0,7875.0,7803.0,7809.0,7783.0,7800.0,7595.0,7562.0,7338.0,7186.0,7191.0,7029.0,7036.0,6801.0,6716.0,4987.0,5099.0,5384.0,5537.0,5772.0,5943.0,6019.0,6116.0,6177.0,6264.0,6411.0,6529.0,6641.0,6755.0,6890.0,7035.0,7149.0,7288.0,7364.0,7443.0,7495.0,7565.0,7596.0,7629.0,7649.0,7700.0,7747.0,7797.0,7854.0,7865.0,7934.0,7974.0,8045.0,8078.0,8085.0,8118.0,8159.0,8233.0,8215.0,8282.0,8281.0,8301.0,8311.0,8306.0,8337.0,8310.0,8337.0,8386.0,8394.0,8408.0,8378.0,8426.0,8457.0,8467.0,8412.0,8424.0,8420.0,8438.0,8414.0,8449.0,8470.0,8519.0,8527.0,8524.0,8545.0,8539.0,8565.0,8579.0,8579.0,8587.0,8603.0,8622.0,8621.0,8628.0,8641.0,8611.0,8589.0,8524.0,8505.0,8575.0,8590.0,8608.0,8612.0,8645.0,8671.0,8635.0,8638.0,8652.0,8667.0,8667.0,8669.0,8654.0,8706.0,8692.0,8676.0,8665.0,8657.0,8654.0,8652.0,8652.0,8574.0,8537.0,8455.0,7829.0,7801.0,7967.0,8017.0,7997.0,8054.0,8190.0,8263.0,8293.0,8343.0,8351.0,8408.0,8456.0,8454.0,8477.0,8451.0,8482.0,8499.0,8488.0,8494.0,8518.0,8519.0,8522.0,8540.0,8535.0,8517.0,8564.0,8584.0,8527.0,8495.0,8497.0,8500.0,8527.0,8520.0,8482.0,8474.0,8428.0,8304.0,7168.0,7253.0,7402.0,7653.0,7879.0,7913.0,7944.0,7906.0,7966.0,8000.0,8057.0,8060.0,8039.0,8061.0,8067.0,8083.0,8044.0,8078.0,8031.0,8007.0,7913.0,7859.0,7793.0,7722.0,7633.0,7641.0,7646.0,7695.0,7620.0,7572.0,7582.0,7650.0,7729.0,7748.0,7664.0,7828.0,7818.0,7811.0,7805.0,7827.0,7822.0,7804.0,7664.0,7585.0,7426.0,7297.0,7241.0,7036.0,7088.0,6869.0,6767.0,5083.0,5213.0,5490.0,5641.0,5887.0,6035.0,6131.0,6202.0,6275.0,6362.0,6502.0,6606.0,6736.0,6833.0,6962.0,7086.0,7187.0,7310.0,7395.0,7458.0,7503.0,7548.0,7596.0,7638.0,7668.0,7700.0,7766.0,7820.0,7881.0,7861.0,7920.0,7967.0,8012.0,8059.0,8102.0,8126.0,8177.0,8220.0,8242.0,8292.0,8358.0,8337.0,8366.0,8378.0,8417.0,8415.0,8451.0,8479.0,8503.0,8492.0,8523.0,8548.0,8576.0,8575.0,8562.0,8539.0,8569.0,8614.0,8595.0,8579.0,8642.0,8700.0,8724.0,8720.0,8718.0,8739.0,8751.0,8786.0,8780.0,8808.0,8818.0,8836.0,8833.0,8835.0,8857.0,8835.0,8789.0,8699.0,8684.0,8820.0,8800.0,8810.0,8848.0,8862.0,8877.0,8860.0,8887.0,8883.0,8885.0,8891.0,8899.0,8879.0,8929.0,8876.0,8900.0,8905.0,8881.0,8875.0,8858.0,8844.0,8753.0,8693.0,8609.0,7834.0,7968.0,7964.0,8032.0,7966.0,8114.0,8212.0,8298.0,8340.0,8368.0,8423.0,8439.0,8492.0,8524.0,8521.0,8532.0,8543.0,8560.0,8570.0,8619.0,8597.0,8626.0,8624.0,8634.0,8584.0,8581.0,8646.0,8657.0,8627.0,8593.0,8598.0,8594.0,8596.0,8545.0,8549.0,8571.0,8492.0,8422.0,7014.0,7167.0,7284.0,7563.0,7734.0,7929.0,7877.0,7885.0,7946.0,7952.0,8012.0,8042.0,7964.0,7986.0,7985.0,8014.0,7993.0,7946.0,7911.0,7881.0,7708.0,7590.0,7477.0,7368.0,7262.0,7230.0,7274.0,7285.0,7247.0,7260.0,7293.0,7315.0,7331.0,7361.0,7395.0,7620.0,7572.0,7604.0,7599.0,7600.0,7598.0,7499.0,7420.0,7292.0,7096.0,7016.0,7033.0,6771.0,6819.0,6644.0,6509.0,3386.0,3517.0,3734.0,3901.0,4159.0,4357.0,4486.0,4595.0,4680.0,4809.0,4969.0,5133.0,5310.0,5485.0,5684.0,5869.0,6076.0,6261.0,6460.0,6600.0,6694.0,6785.0,6870.0,6935.0,6990.0,7044.0,7113.0,7185.0,7252.0,7217.0,7290.0,7379.0,7433.0,7478.0,7540.0,7569.0,7630.0,7666.0,7704.0,7743.0,7774.0,7775.0,7791.0,7811.0,7805.0,7822.0,7800.0,7840.0,7820.0,7836.0,7814.0,7819.0,7839.0,7863.0,7817.0,7780.0,7806.0,7795.0,7763.0,7734.0,7757.0,7826.0,7836.0,7864.0,7869.0,7872.0,7911.0,7972.0,7992.0,8042.0,8042.0,8066.0,8062.0,8067.0,8074.0,8066.0,8029.0,7931.0,7861.0,7931.0,7882.0,7928.0,7969.0,7995.0,8020.0,7999.0,8033.0,8009.0,7986.0,7959.0,7967.0,7911.0,7917.0,7876.0,7869.0,7866.0,7939.0,7967.0,7942.0,7883.0,7729.0,7591.0,7467.0,5519.0,5809.0,5891.0,5924.0,5675.0,5964.0,6383.0,6558.0,6712.0,6804.0,6905.0,6932.0,6990.0,7039.0,7051.0,7056.0,7062.0,7095.0,7109.0,7099.0,7125.0,7127.0,7121.0,7109.0,7086.0,7057.0,7061.0,7054.0,7017.0,6897.0,6760.0,6651.0,6525.0,6449.0,6384.0,6451.0,6627.0,6490.0,4619.0,4907.0,5036.0,5120.0,5351.0,5381.0,5432.0,5478.0,5526.0,5477.0,5462.0,5495.0,5458.0,5387.0,5300.0,5154.0,4995.0,4854.0,4762.0,4624.0,4512.0,4466.0,4486.0,4562.0,4397.0,4580.0,4839.0,4919.0,4935.0,4940.0,4941.0,5023.0,4983.0,4943.0,4798.0,4744.0,4734.0,4857.0,4959.0,4908.0,4846.0,4626.0,4354.0,4141.0,4037.0,3821.0,3628.0,3602.0,3484.0,3370.0,3162.0,3126.0,3437.0,3711.0,3908.0,4180.0,4387.0,4517.0,4609.0,4729.0,4820.0,5000.0,5156.0,5339.0,5512.0,5712.0,5905.0,6111.0,6297.0,6454.0,6605.0,6716.0,6802.0,6860.0,6928.0,6973.0,7023.0,7102.0,7169.0,7222.0,7238.0,7295.0,7365.0,7435.0,7502.0,7575.0,7628.0,7664.0,7717.0,7723.0,7781.0,7812.0,7801.0,7829.0,7836.0,7832.0,7843.0,7830.0,7847.0,7848.0,7852.0,7843.0,7851.0,7852.0,7875.0,7853.0,7820.0,7818.0,7863.0,7826.0,7824.0,7835.0,7846.0,7865.0,7859.0,7884.0,7887.0,7945.0,8017.0,8058.0,8094.0,8092.0,8125.0,8107.0,8124.0,8136.0,8153.0,8134.0,8108.0,8065.0,8083.0,8008.0,8006.0,8041.0,8072.0,8086.0,8075.0,8106.0,8077.0,8050.0,8021.0,8019.0,7967.0,7915.0,7987.0,7912.0,7928.0,8043.0,8135.0,8057.0,8001.0,7862.0,7751.0,7572.0,5660.0,5861.0,5858.0,5827.0,5478.0,5873.0,6278.0,6505.0,6681.0,6852.0,6926.0,7002.0,7089.0,7157.0,7170.0,7176.0,7240.0,7232.0,7293.0,7320.0,7309.0,7318.0,7326.0,7328.0,7279.0,7246.0,7236.0,7200.0,7133.0,7002.0,6813.0,6652.0,6471.0,6325.0,6327.0,6508.0,6717.0,6730.0,4408.0,4569.0,4745.0,4864.0,4972.0,5108.0,5090.0,5150.0,5155.0,5236.0,5191.0,5210.0,5173.0,5131.0,5014.0,4771.0,4581.0,4480.0,4379.0,4213.0,4210.0,4201.0,4300.0,4455.0,4310.0,4535.0,4948.0,5051.0,5082.0,5078.0,5099.0,5097.0,5072.0,4976.0,4749.0,4515.0,4576.0,4713.0,4852.0,4817.0,4746.0,4422.0,4091.0,3856.0,3726.0,3621.0,3381.0,3233.0,3236.0,3265.0,3253.0,3573.0,3659.0,3873.0,4034.0,4298.0,4486.0,4585.0,4665.0,4762.0,4865.0,5022.0,5178.0,5344.0,5494.0,5674.0,5876.0,6060.0,6206.0,6371.0,6502.0,6571.0,6646.0,6733.0,6784.0,6831.0,6885.0,6923.0,6991.0,7064.0,7061.0,7135.0,7193.0,7289.0,7319.0,7380.0,7439.0,7481.0,7509.0,7542.0,7609.0,7606.0,7604.0,7616.0,7651.0,7618.0,7638.0,7630.0,7638.0,7653.0,7635.0,7645.0,7646.0,7647.0,7677.0,7643.0,7600.0,7627.0,7657.0,7587.0,7599.0,7622.0,7633.0,7641.0,7634.0,7650.0,7668.0,7723.0,7796.0,7832.0,7856.0,7872.0,7909.0,7884.0,7903.0,7918.0,7889.0,7866.0,7774.0,7730.0,7754.0,7724.0,7721.0,7763.0,7802.0,7812.0,7807.0,7804.0,7804.0,7774.0,7746.0,7757.0,7673.0,7664.0,7715.0,7667.0,7659.0,7792.0,7819.0,7811.0,7745.0,7583.0,7451.0,7269.0,5582.0,5659.0,5557.0,5526.0,5221.0,5552.0,5920.0,6132.0,6332.0,6465.0,6564.0,6637.0,6726.0,6793.0,6807.0,6828.0,6878.0,6904.0,6945.0,6971.0,6982.0,6984.0,6968.0,6966.0,6919.0,6892.0,6881.0,6859.0,6799.0,6642.0,6490.0,6316.0,6149.0,5997.0,6029.0,6188.0,6424.0,6576.0,4076.0,4219.0,4352.0,4468.0,4650.0,4787.0,4750.0,4766.0,4777.0,4847.0,4830.0,4860.0,4829.0,4761.0,4688.0,4509.0,4301.0,4190.0,4079.0,3950.0,3934.0,3926.0,4039.0,4137.0,4042.0,4258.0,4680.0,4769.0,4768.0,4776.0,4762.0,4751.0,4725.0,4626.0,4431.0,4218.0,4218.0,4407.0,4483.0,4469.0,4370.0,4184.0,3800.0,3569.0,3496.0,3304.0,3167.0,3031.0,3126.0,2898.0,2867.0,958.0,1136.0,1227.0,1333.0,1425.0,1549.0,1638.0,1709.0,1782.0,1866.0,1960.0,2094.0,2223.0,2362.0,2530.0,2719.0,2937.0,3171.0,3379.0,3543.0,3638.0,3619.0,3663.0,3696.0,3744.0,3767.0,3773.0,3734.0,3741.0,3718.0,3717.0,3714.0,3786.0,3770.0,3587.0,3509.0,3054.0,2660.0,2592.0,2585.0,2620.0,2663.0,2723.0,2828.0,2862.0,2914.0,2652.0,2325.0,2213.0,2148.0,2076.0,2014.0,1954.0,1928.0,1941.0,1884.0,1705.0,1826.0,1751.0,1528.0,1343.0,1239.0,1212.0,1178.0,1189.0,1211.0,1236.0,1272.0,1328.0,1363.0,1405.0,1428.0,1426.0,1422.0,1410.0,1445.0,1616.0,1909.0,1898.0,1641.0,1490.0,1261.0,1175.0,1157.0,1145.0,1135.0,1133.0,1112.0,1089.0,1087.0,1089.0,1136.0,1188.0,1157.0,1177.0,1166.0,1175.0,1196.0,1218.0,1256.0,1346.0,1472.0,1836.0,3311.0,3422.0,1983.0,1803.0,1865.0,1493.0,1167.0,1036.0,1021.0,1001.0,997.0,993.0,1003.0,1004.0,995.0,985.0,1004.0,989.0,999.0,1009.0,999.0,1005.0,1006.0,1003.0,993.0,993.0,985.0,978.0,975.0,979.0,985.0,989.0,1004.0,1060.0,1106.0,1223.0,1585.0,2345.0,990.0,917.0,930.0,892.0,883.0,922.0,894.0,905.0,908.0,895.0,894.0,886.0,893.0,890.0,920.0,914.0,892.0,865.0,909.0,895.0,898.0,872.0,874.0,877.0,875.0,838.0,864.0,836.0,846.0,823.0,816.0,846.0,815.0,835.0,787.0,843.0,828.0,780.0,825.0,840.0,830.0,859.0,856.0,804.0,847.0,906.0,822.0,916.0,937.0,921.0,948.0,884.0,1017.0,1093.0,1176.0,1237.0,1346.0,1403.0,1459.0,1497.0,1563.0,1630.0,1699.0,1794.0,1892.0,2007.0,2129.0,2272.0,2400.0,2533.0,2638.0,2707.0,2755.0,2811.0,2839.0,2880.0,2911.0,2930.0,2950.0,2982.0,2929.0,2955.0,2982.0,3032.0,3057.0,3040.0,2992.0,2925.0,2891.0,2898.0,2892.0,2928.0,2947.0,2969.0,3001.0,3015.0,2983.0,2936.0,2856.0,2827.0,2808.0,2795.0,2771.0,2754.0,2737.0,2683.0,2671.0,2631.0,2569.0,2485.0,2449.0,2464.0,2507.0,2519.0,2521.0,2546.0,2553.0,2568.0,2595.0,2617.0,2633.0,2648.0,2657.0,2649.0,2635.0,2635.0,2595.0,2548.0,2422.0,2453.0,2415.0,2441.0,2478.0,2485.0,2470.0,2484.0,2466.0,2469.0,2464.0,2483.0,2477.0,2470.0,2502.0,2453.0,2436.0,2426.0,2496.0,2569.0,2571.0,2541.0,2512.0,2418.0,2156.0,1836.0,1458.0,1335.0,1559.0,1621.0,1564.0,1789.0,2156.0,2288.0,2405.0,2455.0,2481.0,2507.0,2532.0,2546.0,2519.0,2536.0,2542.0,2515.0,2536.0,2540.0,2547.0,2508.0,2549.0,2523.0,2509.0,2481.0,2470.0,2441.0,2380.0,2359.0,2288.0,2269.0,2280.0,2187.0,2068.0,1892.0,1661.0,1461.0,2086.0,2165.0,2243.0,2150.0,2136.0,2257.0,2387.0,2396.0,2390.0,2344.0,2369.0,2370.0,2378.0,2388.0,2386.0,2396.0,2413.0,2411.0,2394.0,2398.0,2376.0,2366.0,2290.0,2259.0,2278.0,2284.0,2316.0,2321.0,2250.0,2219.0,2194.0,2215.0,2186.0,2141.0,2138.0,2155.0,2115.0,2104.0,2010.0,2041.0,2113.0,2014.0,1990.0,1939.0,1931.0,1867.0,1798.0,1748.0,1572.0,1618.0,1604.0,949.0,1082.0,1176.0,1290.0,1385.0,1516.0,1600.0,1661.0,1731.0,1806.0,1911.0,2041.0,2172.0,2328.0,2493.0,2693.0,2911.0,3163.0,3376.0,3532.0,3601.0,3605.0,3673.0,3692.0,3730.0,3749.0,3744.0,3711.0,3716.0,3677.0,3672.0,3684.0,3713.0,3655.0,3505.0,3223.0,2791.0,2503.0,2465.0,2458.0,2475.0,2507.0,2583.0,2679.0,2729.0,2659.0,2433.0,2134.0,2035.0,1954.0,1903.0,1834.0,1746.0,1694.0,1622.0,1530.0,1401.0,1299.0,1122.0,998.0,923.0,910.0,910.0,916.0,933.0,948.0,985.0,1030.0,1075.0,1135.0,1174.0,1202.0,1188.0,1167.0,1137.0,1101.0,1105.0,1077.0,1036.0,978.0,946.0,891.0,884.0,878.0,880.0,869.0,886.0,873.0,879.0,869.0,888.0,913.0,1013.0,1000.0,1011.0,1011.0,983.0,986.0,961.0,1004.0,1028.0,1139.0,1351.0,1854.0,1692.0,1232.0,1163.0,1229.0,1099.0,879.0,827.0,812.0,796.0,792.0,791.0,790.0,784.0,809.0,787.0,791.0,795.0,797.0,802.0,800.0,809.0,803.0,804.0,795.0,805.0,803.0,806.0,814.0,811.0,834.0,852.0,864.0,875.0,929.0,1017.0,1218.0,1677.0,597.0,545.0,585.0,623.0,697.0,637.0,603.0,591.0,601.0,610.0,608.0,618.0,612.0,596.0,595.0,602.0,617.0,600.0,619.0,602.0,608.0,619.0,623.0,609.0,584.0,619.0,599.0,577.0,599.0,606.0,609.0,573.0,575.0,625.0,604.0,563.0,599.0,604.0,615.0,613.0,542.0,595.0,555.0,582.0,600.0,611.0,547.0,586.0,661.0,595.0,608.0,633.0,745.0,790.0,855.0,883.0,925.0,944.0,956.0,965.0,998.0,1016.0,1062.0,1108.0,1152.0,1207.0,1264.0,1324.0,1385.0,1430.0,1490.0,1527.0,1565.0,1589.0,1627.0,1670.0,1692.0,1736.0,1770.0,1820.0,1732.0,1770.0,1818.0,1854.0,1900.0,1936.0,1966.0,2002.0,2057.0,2081.0,2146.0,2172.0,2198.0,2223.0,2278.0,2319.0,2334.0,2381.0,2418.0,2456.0,2485.0,2511.0,2545.0,2596.0,2620.0,2632.0,2652.0,2699.0,2727.0,2746.0,2785.0,2834.0,2880.0,2909.0,2928.0,2980.0,3013.0,3027.0,3073.0,3111.0,3151.0,3182.0,3212.0,3242.0,3269.0,3301.0,3323.0,3337.0,3326.0,3354.0,3387.0,3446.0,3481.0,3507.0,3534.0,3571.0,3577.0,3615.0,3652.0,3679.0,3727.0,3735.0,3762.0,3743.0,3776.0,3809.0,3847.0,3835.0,3851.0,3881.0,3899.0,3860.0,3902.0,3905.0,3632.0,3652.0,3789.0,3821.0,3812.0,3912.0,3962.0,3988.0,4036.0,4076.0,4091.0,4128.0,4158.0,4206.0,4228.0,4235.0,4261.0,4279.0,4323.0,4336.0,4353.0,4380.0,4372.0,4397.0,4394.0,4401.0,4438.0,4471.0,4447.0,4416.0,4435.0,4457.0,4449.0,4441.0,4492.0,4439.0,4495.0,4342.0,3708.0,3720.0,3828.0,4036.0,4177.0,4210.0,4193.0,4158.0,4190.0,4207.0,4264.0,4238.0,4223.0,4199.0,4194.0,4221.0,4209.0,4206.0,4176.0,4087.0,4025.0,3943.0,3794.0,3715.0,3750.0,3851.0,3975.0,4020.0,4042.0,3995.0,4011.0,4001.0,3959.0,3867.0,3832.0,3845.0,3799.0,3759.0,3676.0,3647.0,3595.0,3580.0,3505.0,3437.0,3386.0,3299.0,3186.0,3343.0,3112.0,3049.0,3041.0,820.0,1001.0,1094.0,1166.0,1244.0,1309.0,1347.0,1368.0,1405.0,1431.0,1497.0,1557.0,1640.0,1726.0,1816.0,1910.0,1991.0,2080.0,2164.0,2220.0,2271.0,2299.0,2332.0,2357.0,2383.0,2407.0,2448.0,2483.0,2525.0,2446.0,2479.0,2517.0,2576.0,2592.0,2624.0,2688.0,2706.0,2749.0,2768.0,2792.0,2797.0,2795.0,2805.0,2814.0,2801.0,2810.0,2801.0,2804.0,2795.0,2792.0,2800.0,2795.0,2803.0,2810.0,2817.0,2814.0,2815.0,2861.0,2872.0,2892.0,2905.0,2930.0,2958.0,2978.0,2999.0,3017.0,3043.0,3075.0,3101.0,3133.0,3156.0,3189.0,3216.0,3239.0,3271.0,3293.0,3332.0,3344.0,3351.0,3393.0,3429.0,3454.0,3466.0,3511.0,3540.0,3566.0,3586.0,3615.0,3640.0,3660.0,3695.0,3698.0,3714.0,3723.0,3810.0,3803.0,3865.0,3809.0,3849.0,3840.0,3861.0,3869.0,3843.0,3610.0,3556.0,3669.0,3687.0,3715.0,3741.0,3804.0,3840.0,3890.0,3949.0,3945.0,3978.0,4014.0,4042.0,4049.0,4048.0,4078.0,4088.0,4128.0,4126.0,4150.0,4160.0,4154.0,4172.0,4168.0,4159.0,4191.0,4183.0,4180.0,4133.0,4114.0,4100.0,4140.0,4127.0,4101.0,4120.0,4160.0,4029.0,3318.0,3375.0,3437.0,3509.0,3681.0,3646.0,3681.0,3660.0,3647.0,3645.0,3631.0,3641.0,3579.0,3542.0,3556.0,3512.0,3485.0,3477.0,3393.0,3271.0,3218.0,3110.0,3057.0,2953.0,2885.0,3046.0,3185.0,3226.0,3235.0,3223.0,3173.0,3194.0,3133.0,3069.0,2940.0,2913.0,2909.0,2826.0,2776.0,2816.0,2734.0,2704.0,2628.0,2654.0,2608.0,2511.0,2405.0,2316.0,2354.0,2338.0,2248.0))
    val ones = DenseMatrix.ones[Double](1, 11)
    val N = DenseMatrix.vertcat(M * 0.00001,ones)

    var af =spark.broadcast(inv(N.t * N) * N.t, image.getBands)


    val hsidata = file.map(pair => {
      val datatype = bconf.value._4 match {
        case 2 => 2.toShort
        case 4 => 4.toShort
        case 12 => 2.toShort
        case _ => {
          println("不支持的datasize格式!");
          0.toShort
          sys.exit(-1)
        }
      }
      val data = pair._2 // classOf[Array[Byte]]
      val len = data.length // size of this partition(Byte)
      val col = bconf.value._2
      val bands = bconf.value._3
      val key = pair._1 / (bands * datatype)
      val pixel = len / (datatype * bands)
      println("pixel: " + pixel)
      val fdata = bconf.value._5 match { //header.getInter.toLowerCase()
        case "bil" => JTool.BtoFBil(data, pixel, col.toShort, bands.toShort, datatype)
        case "bip" => JTool.BtoFBip(data, pixel, bands.toShort, datatype)
        case _ => {
          println("不支持的interleave格式!")
          sys.exit(-1)
        }
      }

      var abundance = new Array[Double](af.value._1.rows) //
      var fdataMatrix = DenseMatrix.tabulate(fdata.length, af.value._2.toInt){ // rows 192 cols n
        case (i, j) => fdata(i)(j).toDouble
      }
//        new DenseMatrix(fdata)
//      var fdataMatrix = new DenseMatrix(fdata.length, 192, fdata)
      val ones = DenseMatrix.ones[Double](1, fdata.length)

//      val X = DenseMatrix.vertcat(fdataMatrix, ones);
      val X = DenseMatrix.vertcat(fdataMatrix.t, ones)
      (af.value._1 * X)
//      val DenseMatrix.vertcat(fdataMatrix, ones)
    }).reduce((x, y)=>{
      (sum(x( *, ::)).asDenseMatrix +  sum(y(*, ::)).asDenseMatrix).t


//      (sum(x(::, *)).t.asDenseMatrix.t.t + sum(y(::, *)).t.asDenseMatrix.t.t)
    })

//    hsidata.foreach(println
    println("hhee")












//    println(M2(192,0))

//    mm.foreachValue(x => println(x))
//    m4.foreachValue(x=>println(x))
  val m5 = new DenseMatrix(2,3,Array(11,12,12,21,21,11)) // 2行3列，元素分别为Array的元素


  }
}
